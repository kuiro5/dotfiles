snippet _rrt
/* global describe, it */
import { expect } from 'chai';
import ActionTypes from '~/src/libs/actionTypes/actionTypes';
describe('Foo', () => {
  describe('Bar', () => {
    it('Baz', () => {
    });
  });
});
endsnippet


snippet _ract
/* global describe, it, beforeEach, afterEach */
import { expect } from 'chai';
import ActionTypes from '~/src/libs/actionTypes/actionTypes';
import configureStore from 'redux-mock-store';
import thunk from 'redux-thunk';
const mockStore = configureStore([thunk]);
import sinon from 'sinon';
import sinonStubPromise from 'sinon-stub-promise';
sinonStubPromise(sinon);
let sandbox;
describe('Foo', () => {
  beforeEach(() => {
    sandbox = sinon.sandbox.create();
  });
  afterEach(() => {
    sandbox.restore();
  });
  describe('Bar', () => {
    it('Baz', () => {
      const expectedActions = [];
      const store = mockStore({});
      store.dispatch();
      expect(store.getActions()).to.eql(expectedActions);
    });
  });
});
endsnippet

snippet _rc
import React, { Component } from 'react';
import PropTypes from 'prop-types';

class Foo extends Component {
  constructor () {
    super();
  }
  render () {
    return ();
  }
}

Foo.propTypes = {};

export default Foo;
endsnippet

snippet _rr
export function foo (state = '', { type }) {
  switch (type) {
    case 'bar':
      return baz;
    default:
      return state;
  }
}
endsnippet

snippet _rns
import { StyleSheet } from 'react-native'
export default StyleSheet.create({
});
endsnippet
